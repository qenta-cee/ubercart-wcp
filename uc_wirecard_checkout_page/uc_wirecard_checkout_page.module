<?php
/**
 * Shop System Plugins - Terms of Use
 *
 * The plugins offered are provided free of charge by Wirecard Central Eastern
 * Europe GmbH
 * (abbreviated to Wirecard CEE) and are explicitly not part of the Wirecard
 * CEE range of products and services.
 *
 * They have been tested and approved for full functionality in the standard
 * configuration
 * (status on delivery) of the corresponding shop system. They are under
 * General Public License Version 2 (GPLv2) and can be used, developed and
 * passed on to third parties under the same terms.
 *
 * However, Wirecard CEE does not provide any guarantee or accept any liability
 * for any errors occurring when used in an enhanced, customized shop system
 * configuration.
 *
 * Operation in an enhanced, customized configuration is at your own risk and
 * requires a comprehensive test phase by the user of the plugin.
 *
 * Customers use the plugins at their own risk. Wirecard CEE does not guarantee
 * their full functionality neither does Wirecard CEE assume liability for any
 * disadvantages related to the use of the plugins. Additionally, Wirecard CEE
 * does not guarantee the full functionality for customized shop systems or
 * installed plugins of other vendors of plugins within the same shop system.
 *
 * Customers are responsible for testing the plugin's functionality before
 * starting productive operation.
 *
 * By installing the plugin into the shop system the customer agrees to these
 * terms of use. Please do not use the plugin if you do not agree to these
 * terms of use!
 */

/**
 * @file
 * Wirecard Checkout Page Payment Gateway
 *
 */

define('UC_WIRECARD_CHECKOUT_PAGE_NAME', 'Uebercart35_WirecardCheckoutPage');
define('UC_WIRECARD_CHECKOUT_PAGE_VERSION', '1.2.0');
define('UC_WIRECARD_CHECKOUT_PAGE_WINDOWNAME', 'WirecardCheckoutPageFrame');

ini_set('include_path', ini_get('include_path') . PATH_SEPARATOR . dirname(__FILE__) . '/library');

require_once 'autoload.php';
require_once 'partials/Partial.php';

/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 *
 * @return string
 */

function uc_wirecard_checkout_page_help($path, $arg)
{
    switch ($path) {
        case "admin/help#uc_wirecard_checkout_page":
            return '<p>' . t(
                'Wirecard CEE is a popular payment service provider (PSP) and has connections with over 20 national and international currencies.'
            ) . '</p>';
            break;
    }
}

/**
 * Gateway
 *
 * @return mixed
 */
function uc_wirecard_checkout_page_uc_payment_gateway()
{
    $gateways['uc_wirecard_checkout_page'] = array(
        'title' => t('Wirecard Checkout Page'),
        'description' => t(
            'Wirecard CEE is a popular payment service provider (PSP) and has connections with over 20 national and international currencies.'
        ),
    );
    return $gateways;
}

/**
 * Payment methods
 *
 * name shown in backend
 * title shown in frontend
 * desc shown nowhere?
 *
 * @return array
 */

function uc_wirecard_checkout_page_uc_payment_method()
{
    $methods[] = array(
        'id' => 'uc_wcp_select',
        'name' => t('Wirecard Checkout Page Select'),
        'title' => t('Wirecard Checkout Page Select'),
        'desc' => t('Wirecard Checkout Page Select'),
        'callback' => 'uc_wirecard_checkout_page',
        'redirect' => 'uc_wirecard_checkout_page_form',
        'weight' => 100,
        'checkout' => true,
    );
    $methods[] = array(
        'id' => 'uc_wcp_ccard',
        'name' => t('Wirecard Checkout Page Credit Card'),
        'title' => t('Wirecard Checkout Page Credit Card'),
        'desc' => t('Wirecard Checkout Page Credit Card'),
        'callback' => 'uc_wirecard_checkout_page',
        'redirect' => 'uc_wirecard_checkout_page_form',
        'weight' => 110,
        'checkout' => true,
    );
    $methods[] = array(
        'id' => 'uc_wcp_ccard-moto',
        'name' => t('Wirecard Checkout Page Credit Card MoTo'),
        'title' => t('Wirecard Checkout Page Credit Card MoTo'),
        'desc' => t('Wirecard Checkout Page Credit Card MoTo'),
        'callback' => 'uc_wirecard_checkout_page',
        'redirect' => 'uc_wirecard_checkout_page_form',
        'weight' => 120,
        'checkout' => true,
    );
    $methods[] = array(
        'id' => 'uc_wcp_maestro',
        'name' => t('Wirecard Checkout Page Maestro SecureCode'),
        'title' => t('Wirecard Checkout Page Maestro SecureCode'),
        'desc' => t('Wirecard Checkout Page Maestro SecureCode'),
        'callback' => 'uc_wirecard_checkout_page',
        'redirect' => 'uc_wirecard_checkout_page_form',
        'weight' => 130,
        'checkout' => true,
    );
    $methods[] = array(
        'id' => 'uc_wcp_eps',
        'name' => t('Wirecard Checkout Page eps Online Bank Transfer'),
        'title' => t('Wirecard Checkout Page eps Online Bank Transfer') . Partial::eps(),
        'desc' => t('Wirecard Checkout Page eps Online Bank Transfer'),
        'callback' => 'uc_wirecard_checkout_page',
        'redirect' => 'uc_wirecard_checkout_page_form',
        'weight' => 140,
        'checkout' => true,
    );
    $methods[] = array(
        'id' => 'uc_wcp_idl',
        'name' => t('Wirecard Checkout Page iDEAL'),
        'title' => t('Wirecard Checkout Page iDEAL') . Partial::ideal(),
        'desc' => t('Wirecard Checkout Page iDEAL'),
        'callback' => 'uc_wirecard_checkout_page',
        'redirect' => 'uc_wirecard_checkout_page_form',
        'weight' => 150,
        'checkout' => true,
    );
    $methods[] = array(
        'id' => 'uc_wcp_giropay',
        'name' => t('Wirecard Checkout Page giropay'),
        'title' => t('Wirecard Checkout Page giropay'),
        'desc' => t('Wirecard Checkout Page giropay'),
        'callback' => 'uc_wirecard_checkout_page',
        'redirect' => 'uc_wirecard_checkout_page_form',
        'weight' => 160,
        'checkout' => true,
    );
    $methods[] = array(
        'id' => 'uc_wcp_sofortueberweisung',
        'name' => t('Wirecard Checkout Page SOFORT banking (PIN/TAN)'),
        'title' => t('Wirecard Checkout Page SOFORT banking (PIN/TAN)'),
        'desc' => t('Wirecard Checkout Page SOFORT banking (PIN/TAN)'),
        'callback' => 'uc_wirecard_checkout_page',
        'redirect' => 'uc_wirecard_checkout_page_form',
        'weight' => 170,
        'checkout' => true,
    );
    $methods[] = array(
        'id' => 'uc_wcp_pbx',
        'name' => t('Wirecard Checkout Page Mobile Phone Invoicing'),
        'title' => t('Wirecard Checkout Page Mobile Phone Invoicing'),
        'desc' => t('Wirecard Checkout Page Mobile Phone Invoicing'),
        'callback' => 'uc_wirecard_checkout_page',
        'redirect' => 'uc_wirecard_checkout_page_form',
        'weight' => 180,
        'checkout' => true,
    );
    $methods[] = array(
        'id' => 'uc_wcp_psc',
        'name' => t('Wirecard Checkout Page paysafecard'),
        'title' => t('Wirecard Checkout Page paysafecard'),
        'desc' => t('Wirecard Checkout Page paysafecard'),
        'callback' => 'uc_wirecard_checkout_page',
        'redirect' => 'uc_wirecard_checkout_page_form',
        'weight' => 190,
        'checkout' => true,
    );
    $methods[] = array(
        'id' => 'uc_wcp_quick',
        'name' => t('Wirecard Checkout Page @QUICK'),
        'title' => t('Wirecard Checkout Page @QUICK'),
        'desc' => t('Wirecard Checkout Page @QUICK'),
        'callback' => 'uc_wirecard_checkout_page',
        'redirect' => 'uc_wirecard_checkout_page_form',
        'weight' => 200,
        'checkout' => true,
    );
    $methods[] = array(
        'id' => 'uc_wcp_paypal',
        'name' => t('Wirecard Checkout Page PayPal'),
        'title' => t('Wirecard Checkout Page PayPal'),
        'desc' => t('Wirecard Checkout Page PayPal'),
        'callback' => 'uc_wirecard_checkout_page',
        'redirect' => 'uc_wirecard_checkout_page_form',
        'weight' => 210,
        'checkout' => true,
    );
    $methods[] = array(
        'id' => 'uc_wcp_elv',
        'name' => t('Wirecard Checkout Page Direct Debit'),
        'title' => t('Wirecard Checkout Page Direct Debit'),
        'desc' => t('Wirecard Checkout Page Direct Debit'),
        'callback' => 'uc_wirecard_checkout_page',
        'redirect' => 'uc_wirecard_checkout_page_form',
        'weight' => 220,
        'checkout' => true,
    );
    $methods[] = array(
        'id' => 'uc_wcp_c2p',
        'name' => t('Wirecard Checkout Page CLICK2PAY'),
        'title' => t('Wirecard Checkout Page CLICK2PAY'),
        'desc' => t('Wirecard Checkout Page CLICK2PAY'),
        'callback' => 'uc_wirecard_checkout_page',
        'redirect' => 'uc_wirecard_checkout_page_form',
        'weight' => 230,
        'checkout' => true,
    );
    $methods[] = array(
        'id' => 'uc_wcp_invoice',
        'name' => t('Wirecard Checkout Page Invoice'),
        'title' => t('Wirecard Checkout Page Invoice') . Partial::invoice(),
        'desc' => t('Wirecard Checkout Page Invoice'),
        'callback' => 'uc_wirecard_checkout_page',
        'redirect' => 'uc_wirecard_checkout_page_form',
        'weight' => 240,
        'checkout' => true,
    );
    $methods[] = array(
        'id' => 'uc_wcp_installment',
        'name' => t('Wirecard Checkout Page Installment'),
        'title' => t('Wirecard Checkout Page Installment') . Partial::installment(),
        'desc' => t('Wirecard Checkout Page Installment'),
        'callback' => 'uc_wirecard_checkout_page',
        'redirect' => 'uc_wirecard_checkout_page_form',
        'weight' => 250,
        'checkout' => true,
    );
    $methods[] = array(
        'id' => 'uc_wcp_bancontact_mistercash',
        'name' => t('Wirecard Checkout Page Bancontact/Mister Cash'),
        'title' => t('Wirecard Checkout Page Bancontact/Mister Cash'),
        'desc' => t('Wirecard Checkout Page Bancontact/Mister Cash'),
        'callback' => 'uc_wirecard_checkout_page',
        'redirect' => 'uc_wirecard_checkout_page_form',
        'weight' => 260,
        'checkout' => true,
    );
    $methods[] = array(
        'id' => 'uc_wcp_przelewy24',
        'name' => t('Wirecard Checkout Page Przelewy24'),
        'title' => t('Wirecard Checkout Page Przelewy24'),
        'desc' => t('Wirecard Checkout Page Przelewy24'),
        'callback' => 'uc_wirecard_checkout_page',
        'redirect' => 'uc_wirecard_checkout_page_form',
        'weight' => 270,
        'checkout' => true,
    );
    $methods[] = array(
        'id' => 'uc_wcp_moneta',
        'name' => t('Wirecard Checkout Page moneta.ru'),
        'title' => t('Wirecard Checkout Page moneta.ru'),
        'desc' => t('Wirecard Checkout Page moneta.ru'),
        'callback' => 'uc_wirecard_checkout_page',
        'redirect' => 'uc_wirecard_checkout_page_form',
        'weight' => 280,
        'checkout' => true,
    );
    $methods[] = array(
        'id' => 'uc_wcp_poli',
        'name' => t('Wirecard Checkout Page POLi'),
        'title' => t('Wirecard Checkout Page POLi'),
        'desc' => t('Wirecard Checkout Page POLi'),
        'callback' => 'uc_wirecard_checkout_page',
        'redirect' => 'uc_wirecard_checkout_page_form',
        'weight' => 290,
        'checkout' => true,
    );
    $methods[] = array(
        'id' => 'uc_wcp_ekonto',
        'name' => t('Wirecard Checkout Page eKonto'),
        'title' => t('Wirecard Checkout Page eKonto'),
        'desc' => t('Wirecard Checkout Page eKonto'),
        'callback' => 'uc_wirecard_checkout_page',
        'redirect' => 'uc_wirecard_checkout_page_form',
        'weight' => 300,
        'checkout' => true,
    );
    $methods[] = array(
        'id' => 'uc_wcp_instantbank',
        'name' => t('Wirecard Checkout Page InstantBank'),
        'title' => t('Wirecard Checkout Page InstantBank'),
        'desc' => t('Wirecard Checkout Page InstantBank'),
        'callback' => 'uc_wirecard_checkout_page',
        'redirect' => 'uc_wirecard_checkout_page_form',
        'weight' => 310,
        'checkout' => true,
    );
    $methods[] = array(
        'id' => 'uc_wcp_skrillwallet',
        'name' => t('Wirecard Checkout Page Skrill Digital Wallet'),
        'title' => t('Wirecard Checkout Page Skrill Digital Wallet'),
        'desc' => t('Wirecard Checkout Page Skrill Digital Wallet'),
        'callback' => 'uc_wirecard_checkout_page',
        'redirect' => 'uc_wirecard_checkout_page_form',
        'weight' => 340,
        'checkout' => true,
    );

    return $methods;
}

/**
 * Admin settings
 *
 * @param $op
 * @param $order
 *
 * @return mixed
 */
function uc_wirecard_checkout_page($op, &$order)
{
    switch ($op) {
        case 'cart-review':
            break;

        case 'settings':
            $payment_name = @end(explode("/", $_GET['q']));
            $form['uc_wirecard_checkout_page_customer_id'] = array(
                '#type' => 'textfield',
                '#title' => t('Customer Id'),
                '#description' => t('Wirecard CEE Customer Id'),
                '#default_value' => variable_get('uc_wirecard_checkout_page_customer_id',
                    'D200001'),
            );
            $form['uc_wirecard_checkout_page_shop_id'] = array(
                '#type' => 'textfield',
                '#title' => t('Shop Id'),
                '#description' => t('Wirecard CEE Shop Id'),
                '#default_value' => variable_get('uc_wirecard_checkout_page_shop_id'),
            );
            $form['uc_wirecard_checkout_page_secret'] = array(
                '#type' => 'textfield',
                '#title' => t('Secret'),
                '#description' => t('Wirecard CEE Secret'),
                '#default_value' => variable_get('uc_wirecard_checkout_page_secret',
                    'B8AKTPWBRMNBV455FG6M2DANE99WU2'),
            );
            $form['uc_wirecard_checkout_page_auto_deposit'] = array(
                '#type' => 'checkbox',
                '#title' => t('Auto deposit'),
                '#description' => t('Auto deposit'),
                '#default_value' => variable_get('uc_wirecard_checkout_page_auto_deposit',
                    false),
            );
            $form['uc_wirecard_checkout_page_service_url'] = array(
                '#type' => 'textfield',
                '#title' => t('Service Url'),
                '#description' => t('Backlink on the payment page to your shop, usualy links to contact or imprint page'),
                '#default_value' => variable_get('uc_wirecard_checkout_page_service_url'),
            );
            $form['uc_wirecard_checkout_page_image_url'] = array(
                '#type' => 'textfield',
                '#title' => t('Image Url'),
                '#description' => t('Image Url for displaying an image on the payment page (95x65 pixels preferred)'),
                '#default_value' => variable_get('uc_wirecard_checkout_page_image_url'),
            );
            $form['uc_wirecard_checkout_page_max_retries'] = array(
                '#type' => 'textfield',
                '#title' => t('Max. retries'),
                '#description' => t('Maximal number of payment retries'),
                '#default_value' => variable_get('uc_wirecard_checkout_page_max_retries',
                    -1),
            );
            $form['uc_wirecard_checkout_page_display_text'] = array(
                '#type' => 'textfield',
                '#title' => t('Display Text'),
                '#description' => t('Display Text on the payment page'),
                '#default_value' => variable_get('uc_wirecard_checkout_page_display_text'),
            );
            $form['uc_wirecard_checkout_page_send_additional_data'] = array(
                '#type' => 'checkbox',
                '#title' => t('Send consumer data'),
                '#description' => t('Send consumer information'),
                '#default_value' => variable_get('uc_wirecard_checkout_page_send_additional_data',
                    false),
            );
            $form['uc_wirecard_checkout_page_send_basket_data'] = array(
                '#type' => 'checkbox',
                '#title' => t('Forward consumer basket data'),
                '#description' => t('Forwarding basket data about your consumer to the respective financial service provider.'),
                '#default_value' => variable_get('uc_wirecard_checkout_page_send_basket_data',
                    true),
            );
            $form['uc_wirecard_checkout_page_send_billing_data'] = array(
                '#type' => 'checkbox',
                '#title' => t('Forward consumer billing data'),
                '#description' => t('Forwarding billing data about your consumer to the respective financial service provider.'),
                '#default_value' => variable_get('uc_wirecard_checkout_page_send_billing_data',
                    true),
            );
            $form['uc_wirecard_checkout_page_send_shipping_data'] = array(
                '#type' => 'checkbox',
                '#title' => t('Forward consumer shipping data'),
                '#description' => t('Forwarding shipping data about your consumer to the respective financial service provider.'),
                '#default_value' => variable_get('uc_wirecard_checkout_page_send_shipping_data',
                    true),
            );
            if ($payment_name == 'uc_wcp_installment') {
                $form['uc_wirecard_checkout_page_installment_provider'] = array(
                    '#type' => 'select',
                    '#options' => array(
                        'payolution' => 'Payolution',
                        'ratepay' => 'RatePay'
                    ),
                    '#title' => t('Installment provider'),
                    '#default_value' => variable_get('uc_wirecard_checkout_page_installment_provider',
                        'payolution'),
                );
                $form['uc_wirecard_checkout_page_installment_min_amount'] = array(
                    '#type' => 'textfield',
                    '#title' => t('Minimum amount'),
                    '#default_value' => variable_get('uc_wirecard_checkout_page_installment_min_amount',
                        150),
                );
                $form['uc_wirecard_checkout_page_installment_max_amount'] = array(
                    '#type' => 'textfield',
                    '#title' => t('Maximum amount'),
                    '#default_value' => variable_get('uc_wirecard_checkout_page_installment_max_amount',
                        3500),
                );
                $form['uc_wirecard_checkout_page_installment_accepted_currencies'] = array(
                    '#type' => 'textfield',
                    '#title' => t('Accepted currencies'),
                    '#default_value' => variable_get('uc_wirecard_checkout_page_installment_accepted_currencies',
                        'EUR'),
                );
                $form['uc_wirecard_checkout_page_installment_accepted_billing_countries'] = array(
                    '#type' => 'textfield',
                    '#title' => t('Accepted billing countries'),
                    '#default_value' => variable_get('uc_wirecard_checkout_page_installment_accepted_billing_countries',
                        'AT,DE,CH'),
                );
                $form['uc_wirecard_checkout_page_installment_accepted_shipping_countries'] = array(
                    '#type' => 'textfield',
                    '#title' => t('Accepted shipping countries'),
                    '#default_value' => variable_get('uc_wirecard_checkout_page_installment_accepted_shipping_countries',
                        'AT,DE,CH'),
                );

            } elseif ($payment_name == 'uc_wcp_invoice') {
                $form['uc_wirecard_checkout_page_invoice_provider'] = array(
                    '#type' => 'select',
                    '#options' => array(
                        'wirecard' => 'Wirecard',
                        'payolution' => 'Payolution',
                        'ratepay' => 'RatePay'
                    ),
                    '#title' => t('Invoice provider'),
                    '#default_value' => variable_get('uc_wirecard_checkout_page_invoice_provider',
                        'wirecard'),
                );
                $form['uc_wirecard_checkout_page_invoice_min_amount'] = array(
                    '#type' => 'textfield',
                    '#title' => t('Minimum amount'),
                    '#default_value' => variable_get('uc_wirecard_checkout_page_invoice_min_amount',
                        150),
                );
                $form['uc_wirecard_checkout_page_invoice_max_amount'] = array(
                    '#type' => 'textfield',
                    '#title' => t('Maximum amount'),
                    '#default_value' => variable_get('uc_wirecard_checkout_page_invoice_max_amount',
                        3500),
                );
                $form['uc_wirecard_checkout_page_invoice_accepted_currencies'] = array(
                    '#type' => 'textfield',
                    '#title' => t('Accepted currencies'),
                    '#default_value' => variable_get('uc_wirecard_checkout_page_invoice_accepted_currencies',
                        'EUR'),
                );
                $form['uc_wirecard_checkout_page_invoice_accepted_billing_countries'] = array(
                    '#type' => 'textfield',
                    '#title' => t('Accepted billing countries'),
                    '#default_value' => variable_get('uc_wirecard_checkout_page_invoice_accepted_billing_countries',
                        'AT,DE,CH'),
                );
                $form['uc_wirecard_checkout_page_invoice_accepted_shipping_countries'] = array(
                    '#type' => 'textfield',
                    '#title' => t('Accepted shipping countries'),
                    '#default_value' => variable_get('uc_wirecard_checkout_page_invoice_accepted_shipping_countries',
                        'AT,DE,CH'),
                );
            }

            if (in_array($payment_name,
                array('uc_wcp_invoice', 'uc_wcp_installment'))) {
                $form['uc_wirecard_checkout_page_payolution_terms'] = array(
                    '#type' => 'checkbox',
                    '#title' => t('payolution terms'),
                    '#description' => t('Consumer must accept payolution terms during the checkout process.'),
                    '#default_value' => variable_get('uc_wirecard_checkout_page_payolution_terms',
                        false),
                );
                $form['uc_wirecard_checkout_page_addresses_equal'] = array(
                    '#type' => 'checkbox',
                    '#title' => t('Billing/shipping address must be identical'),
                    '#description' => t('Only applicable for payolution.'),
                    '#default_value' => variable_get('uc_wirecard_checkout_page_addresses_equal',
                        true),
                );
            }
            $form['uc_wirecard_checkout_page_use_iframe'] = array(
                '#type' => 'checkbox',
                '#title' => t('Use iframe'),
                '#description' => t('Use iframe'),
                '#default_value' => variable_get('uc_wirecard_checkout_page_use_iframe',
                    false),
            );

            return $form;
    }
}

function uc_wirecard_checkout_page_form($form, &$form_state, $order)
{

    if ($order->payment_method == 'uc_wcp_invoice' && uc_wirecard_checkout_page_invoice_allowed($order) !== true) {
        drupal_set_message(t('Invoice is not allowed') . "<br>" . uc_wirecard_checkout_page_invoice_allowed($order),
            'error');
        drupal_goto('cart/checkout');
    }

    if ($order->payment_method == 'uc_wcp_installment' && uc_wirecard_checkout_page_installment_allowed($order) !== true) {
        drupal_set_message(t('Installment is not allowed') . "<br>" . uc_wirecard_checkout_page_installment_allowed($order),
            'error');
        drupal_goto('cart/checkout');
    }

    $form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit Orders')
    );

    if (variable_get('uc_wirecard_checkout_page_use_iframe')) {
        $form['#action'] = url('cart/wirecard_checkout_page/iframe');
        return $form;
    }

    try {
        $client = uc_wirecard_checkout_page_initiate_payment($order);
        $response = $client->initiate();

        if ($response->hasFailed()) {
            watchdog(
                'Wirecard Checkout Page',
                "Response failed! Error: @message",
                array('@message' => $response->getError()->getMessage()),
                WATCHDOG_ERROR
            );

            drupal_set_message($response->getError()->getMessage(), 'error');
        }
    } catch (Exception $e) {
        throw($e);
    }

    $form['#action'] = $response->getRedirectUrl();
    return $form;
}

/**
 * Install return/confirm hooks
 *
 * @return mixed
 */
function uc_wirecard_checkout_page_menu()
{
    $items['cart/wirecard_checkout_page/confirm'] = array(
        'title' => 'Server2server request payment status',
        'page callback' => 'uc_wirecard_checkout_page_confirm',
        'access callback' => true,
        'type' => MENU_CALLBACK,
        'file' => 'uc_wirecard_checkout_page.pages.inc',
    );
    $items['cart/wirecard_checkout_page/return'] = array(
        'title' => 'Browser return from payment page',
        'page callback' => 'uc_wirecard_checkout_page_return',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
        'file' => 'uc_wirecard_checkout_page.pages.inc',
    );
    $items['cart/wirecard_checkout_page/iframe'] = array(
        'title' => 'Wirecard Checkout Page',
        'page callback' => 'uc_wirecard_checkout_page_iframe',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
        'file' => 'uc_wirecard_checkout_page.pages.inc',
    );
    $items['cart/wirecard_checkout_page/store'] = array(
        'title' => 'Wirecard Checkout Page Store Data',
        'page callback' => 'uc_wirecard_checkout_page_store_additional_data',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
        'file' => 'uc_wirecard_checkout_page.pages.inc',
    );

    return $items;
}


/*
 * internal functions
 */

/**
 * check whether invoice is allowed
 *
 * @param UcOrder $order
 *
 * @return bool
 */
function uc_wirecard_checkout_page_invoice_allowed($order)
{
    $min_amount = intval(variable_get('uc_wirecard_checkout_page_invoice_min_amount', 10));
    $max_amount = intval(variable_get('uc_wirecard_checkout_page_invoice_max_amount', 3500));
    if (strpos(variable_get('uc_wirecard_checkout_page_invoice_accepted_currencies', 'EUR'), $order->currency) === false
    ) {
        return t('Currency not allowed: ') . $order->currency;
    }

    if ($min_amount > $order->order_total) {
        return t('Minimum order total not reached: ') . uc_currency_format($min_amount);
    }

    if ($max_amount < $order->order_total) {
        return t('Maximum order total exceeded: ') . uc_currency_format($max_amount);
    }

    $fields = array(
        'country',
        'first_name',
        'last_name',
        'street1',
        'street2',
        'city',
        'postal_code',
        'zone'
    );
    if (variable_get('uc_wirecard_checkout_page_invoice_provider') == 'payolution' && variable_get('uc_wirecard_checkout_page_addresses_equal') === true) {
        foreach ($fields as $f) {
            $bf = "billing_$f";
            $df = "delivery_$f";
            if ($order->$bf != $order->$df) {
                return t('Billing and shipping addresses must be identical.');
            }
        }
    }

    return true;
}

/**
 * check whether installment is allowed
 *
 * @param UcOrder $order
 *
 * @return bool
 */
function uc_wirecard_checkout_page_installment_allowed($order)
{
    $min_amount = intval(variable_get('uc_wirecard_checkout_page_installment_min_amount', 150));
    $max_amount = intval(variable_get('uc_wirecard_checkout_page_installment_max_amount', 3500));
    if (strpos(variable_get('uc_wirecard_checkout_page_installment_accepted_currencies'),
            $order->currency) === false
    ) {
        return t('Currency not allowed: ') . $order->currency;
    }

    if ($order->order_total < $min_amount) {
        return t('Minimum order total not reached: ') . uc_currency_format($min_amount);
    }

    if ($order->order_total > $max_amount) {
        return t('Maximum order total exceeded: ') . uc_currency_format($max_amount);
    }

    $fields = array(
        'country',
        'first_name',
        'last_name',
        'street1',
        'street2',
        'city',
        'postal_code',
        'zone'
    );
    if (variable_get('uc_wirecard_checkout_page_installment_provider') == 'payolution' && variable_get('uc_wirecard_checkout_page_addresses_equal') === true) {
        foreach ($fields as $f) {
            $bf = "billing_$f";
            $df = "delivery_$f";
            if ($order->$bf != $order->$df) {
                return t('Billing and shipping addresses must be identical.');
            }
        }
    }

    return true;
}

/**
 * @param $zone
 *
 * @return mixed
 */
function uc_wirecard_checkout_page_get_zone($zone)
{
    if (is_numeric($zone)) {
        $result = db_query("SELECT * FROM {uc_zones} WHERE zone_id = :id",
            array(':id' => $zone));
    } else {
        $result = db_query("SELECT * FROM {uc_zones} WHERE zone_name = :name",
            array(':name' => $zone));
    }

    return $result->fetchObject();
}

/**
 * @param $order
 *
 * @return WirecardCEE_QPay_FrontendClient
 */
function uc_wirecard_checkout_page_initiate_payment($order)
{
    global $language, $user;

    $paymenttype = strtoupper(str_replace('uc_wcp_', '',
        $order->payment_method));
    $client = new WirecardCEE_QPay_FrontendClient(array(
        'CUSTOMER_ID' => variable_get(
            'uc_wirecard_checkout_page_customer_id'
        ),
        'SHOP_ID' => variable_get('uc_wirecard_checkout_page_shop_id'),
        'SECRET' => variable_get('uc_wirecard_checkout_page_secret'),
        'LANGUAGE' => $language->language
    ));

    $consumerData = new WirecardCEE_Stdlib_ConsumerData();
    $consumerData->setUserAgent($_SERVER['HTTP_USER_AGENT'])
        ->setIpAddress($_SERVER['REMOTE_ADDR']);

    if (variable_get('uc_wirecard_checkout_page_send_additional_data') || in_array(
            $paymenttype,
            Array(
                WirecardCEE_QPay_PaymentType::INVOICE,
                WirecardCEE_QPay_PaymentType::INSTALLMENT
            )
        )
    ) {
        uc_wirecard_checkout_page_set_consumer_information($order,
            $consumerData);
    }

    $returnUrl = url('cart/wirecard_checkout_page/return',
        array('absolute' => true));
    $confirmUrl = url('cart/wirecard_checkout_page/confirm',
        array('absolute' => true, 'https' => true));

    $sysinfo = system_get_info('module', 'uc_store');

    $version = WirecardCEE_QPay_FrontendClient::generatePluginVersion(
        variable_get('uc_store_name'),
        $sysinfo['version'],
        UC_WIRECARD_CHECKOUT_PAGE_NAME,
        UC_WIRECARD_CHECKOUT_PAGE_VERSION
    );

    $client->setAmount(number_format($order->order_total, 2, '.', ''))
        ->setCurrency($order->currency)
        ->setPaymentType($paymenttype)
        ->setOrderDescription(sprintf('user_id:%s order_id:%s', $user->uid,
            $order->order_id))
        ->setPluginVersion($version)
        ->setSuccessUrl($returnUrl)
        ->setPendingUrl($returnUrl)
        ->setCancelUrl($returnUrl)
        ->setFailureUrl($returnUrl)
        ->setConfirmUrl($confirmUrl)
        ->setServiceUrl(variable_get('uc_wirecard_checkout_page_service_url'))
        ->setImageUrl(variable_get('uc_wirecard_checkout_page_image_url'))
        ->setConsumerData($consumerData)
        ->setDisplayText(variable_get('uc_wirecard_checkout_page_display_text'))
        ->setCustomerStatement(sprintf('%s #%06s',
            variable_get('uc_store_name'), $order->order_id))
        ->setDuplicateRequestCheck(false)
        ->setMaxRetries(variable_get('uc_wirecard_checkout_page_max_retries'))
        ->setAutoDeposit(variable_get('uc_wirecard_checkout_page_auto_deposit'))
        ->setWindowName(UC_WIRECARD_CHECKOUT_PAGE_WINDOWNAME)->createConsumerMerchantCrmId($user->mail);

    if(isset($_SESSION['wcp_additional'])){
        foreach($_SESSION['wcp_additional'] as $method=>$value) {
            $client->{"set$method"}($value);
        }
    }
    $client->ubercartOrderId = $order->order_id;
    $client->ubercartCartId = uc_cart_get_id();

    return $client;
}


/**
 * Set additional consumer information
 *
 * @param $order
 * @param WirecardCEE_Stdlib_ConsumerData $consumerData
 */
function uc_wirecard_checkout_page_set_consumer_information(
    $order,
    WirecardCEE_Stdlib_ConsumerData $consumerData
) {

    $user = user_load($order->uid);

    if (property_exists($user, 'field_birthdate')) {
        $birthdate = $user->field_birthdate['und'][0]['value'];
        $consumerData->setBirthDate(new DateTime($birthdate));
    }

    $consumerData->setEmail($order->primary_email);

    $billingAddress = new WirecardCEE_Stdlib_ConsumerData_Address(WirecardCEE_Stdlib_ConsumerData_Address::TYPE_BILLING);

    $billing_country = uc_get_country_data(array('country_id' => $order->billing_country));
    $billing_country = array_pop($billing_country);
    $billing_zone = uc_wirecard_checkout_page_get_zone($order->billing_zone);

    $billingAddress->setFirstname($order->billing_first_name)
        ->setLastname($order->billing_last_name)
        ->setAddress1($order->billing_street1)
        ->setAddress2($order->billing_street2)
        ->setCity($order->billing_city)
        ->setZipCode($order->billing_postal_code)
        ->setCountry($billing_country['country_iso_code_2'])
        ->setPhone($order->billing_phone);

    // for US/CA statecode (2 chars)
    if ($billing_country['country_iso_code_2'] == 'US' || $billing_country['country_iso_code_2'] == 'CA') {
        $billingAddress->setState($billing_zone->zone_code);
    } else {
        $billingAddress->setState($billing_zone->zone_name);
    }

    $shippingAddress = new WirecardCEE_Stdlib_ConsumerData_Address(WirecardCEE_Stdlib_ConsumerData_Address::TYPE_SHIPPING);

    $shipping_country = uc_get_country_data(array('country_id' => $order->delivery_country));
    $shipping_country = array_pop($shipping_country);
    $shipping_zone = uc_wirecard_checkout_page_get_zone($order->billing_zone);

    $shippingAddress->setFirstname($order->delivery_first_name)
        ->setLastname($order->delivery_last_name)
        ->setAddress1($order->delivery_street1)
        ->setAddress2($order->delivery_street2)
        ->setCity($order->delivery_city)
        ->setZipCode($order->delivery_postal_code)
        ->setCountry($shipping_country['country_iso_code_2']);

    // for US/CA statecode (2 chars)
    if ($shipping_country['country_iso_code_2'] == 'US' || $shipping_country['country_iso_code_2'] == 'CA') {
        $shippingAddress->setState($shipping_zone->zone_code);
    } else {
        $shippingAddress->setState($shipping_zone->zone_name);
    }

    $consumerData->addAddressInformation($billingAddress)
        ->addAddressInformation($shippingAddress);

}